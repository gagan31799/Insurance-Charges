# -*- coding: utf-8 -*-
"""Insurance_charges_Linear_regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRtIdff-NR9UeMfju7BV-fc8-vgJcWkg

### Problem Statement

The most important factor for an Insurance Company is to determine what premium charges must be paid by an individual. The charges depend on various factors like age, gender, income, etc. 

Build a model that is capable of predicting the insurance charges a person has to pay depending on his/her age using simple linear regression. Also, evaluate the accuracy of your model by calculating the value of error metrics such as R-squared, MSE, RMSE, and MAE.

---

### List of Activities

**Activity 1:** Analysing the dataset

  
**Activity 2:**  Train-Test split

**Activity 3:**  Model Training

**Activity 4:** Model Prediction and Evaluation

---

#### Activity 1:  Analysing the Dataset

- Create a Pandas DataFrame for **Insurance** dataset using the below link. This dataset consists of following columns:

|Field|Description|
|---:|:---|
|age|Age of primary beneficiary|
|sex|Insurance contractor gender, female or male|
|bmi|Body mass index|
|children|Number of children covered by health insurance/number of dependents|
|region|Beneficiary's residential area in the US, northeast, southeast, southwest, northwest|
|charges|Individual medical costs billed by health insurance|

  **Source:** https://www.kaggle.com/bmarco/health-insurance-data
  
  **Dataset Link:** https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/insurance_dataset.csv

- Print the first five rows of the dataset. Check for null values and treat them accordingly.

- Create a regression plot with `age` on X-axis and `charges` on Y-axis to identify the relationship between these two attributes.
"""

# Import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df=pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/insurance_dataset.csv')
df.head(5)
# Print first five rows using head() function

# Check if there are any null values. If any column has null values, treat them accordingly
df.isna().sum()

# Create a regression plot between 'age' and 'charges'

plt.style.use('dark_background')
plt.figure(figsize = (12, 5), dpi = 96)
plt.title("Regression plot", fontsize = 16)
sns.regplot(df['age'], df['charges'])
#plt.plot(df['T'], slope * df['T'] + intercept, color = 'r', linewidth = 2, label = '$y = âˆ’1.1120x + 69.6911$')
plt.xlabel("Age")
plt.ylabel("Charges")
#plt.legend()
plt.show()

"""---

#### Activity 2: Train-Test Split

We have to determine the effect of `age` on insurance charges. Thus, `age` is the feature variable and `charges` is the target variable. 

Split the dataset into training set and test set such that the training set contains 67% of the instances and the remaining instances will become the test set.
"""

# Split the DataFrame into the training and test sets.


from sklearn.model_selection import train_test_split

X = df['age'] # Pandas DataFrame containing only feature variables
y = df['charges'] # Pandas Series containing the target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42) # Test set will have 33% of the values.

"""---

#### Activity 3: Model Training

Implement simple linear regression using `sklearn` module in the following way:

1. Reshape the feature and the target variable arrays into two-dimensional arrays by using `reshape(-1, 1)` function of numpy module.
2. Deploy the model by importing the `LinearRegression` class and create an object of this class.
3. Call the `fit()` function on the LinearRegression object and print the slope and intercept values of the best fit line.
"""

# 1. Create two-dimensional NumPy arrays for the feature and target variables.
X_train_reshaped=X_train.values.reshape(-1,1)
y_train_reshaped=y_train.values.reshape(-1,1)
X_test_reshaped=X_test.values.reshape(-1,1)
y_test_reshaped=y_test.values.reshape(-1,1)

# Print the shape or dimensions of these reshaped arrays

print("Shape of X_train: ",X_train_reshaped.shape)
print("Shape of y_train: ",y_train_reshaped.shape)
print("Shape of X_test: ",X_test_reshaped.shape)
print("Shape of y_test: ",y_test_reshaped.shape)

# 2. Deploy linear regression model using the 'sklearn.linear_model' module.
from sklearn.linear_model import LinearRegression 
lin_reg=LinearRegression()
  # Create an object of the 'LinearRegression' class.   
lin_reg=LinearRegression()

# 3. Call the 'fit()' function
lin_reg.fit(X_train_reshaped,y_train_reshaped)

# 4. Print the slope and intercept values.
print(lin_reg.coef_)
print(lin_reg.intercept_)

"""---

#### Activity 4: Model Prediction and Evaluation

Predict the values for both training and test sets by calling the `predict()` function on the LinearRegression object. Also, calculate the $R^2$, MSE, RMSE and MAE values to evaluate the accuracy of your model.
"""

# Predict the target variable values for both training set and test set
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

y_train_pred = lin_reg.predict(X_train_reshaped)
y_test_pred = lin_reg.predict(X_test_reshaped)

# Call 'r2_score', 'mean_squared_error' & 'mean_absolute_error' functions of the 'sklearn' module. Calculate RMSE value by taking the square root of MSE.
# Print these values for both training set and test set
print(f"Train Set\n{'-' * 50}")
print(f"R-squared: {r2_score(y_train_reshaped, y_train_pred):.3f}")
print(f"Mean Squared Error: {mean_squared_error(y_train_reshaped, y_train_pred):.3f}")
print(f"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_train_reshaped, y_train_pred)):.3f}")
print(f"Mean Absolute Error: {mean_absolute_error(y_train_reshaped, y_train_pred):.3f}")
      
print(f"\n\nTest Set\n{'-' * 50}")
print(f"R-squared: {r2_score(y_test_reshaped, y_test_pred):.3f}")
print(f"Mean Squared Error: {mean_squared_error(y_test_reshaped, y_test_pred):.3f}")
print(f"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test_reshaped, y_test_pred)):.3f}")
print(f"Mean Absolute Error: {mean_absolute_error(y_test_reshaped, y_test_pred):.3f}")